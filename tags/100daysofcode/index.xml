<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>100daysofcode on Ray Yang</title><link>https://rayspock.com/tags/100daysofcode/</link><description>Recent content in 100daysofcode on Ray Yang</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><managingEditor>rayspock@protonmail.com (rayspock)</managingEditor><webMaster>rayspock@protonmail.com (rayspock)</webMaster><lastBuildDate>Sun, 04 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://rayspock.com/tags/100daysofcode/index.xml" rel="self" type="application/rss+xml"/><item><title>Things You Need to Know Before Working With Go Pipelines</title><link>https://rayspock.com/posts/go-pipeline/</link><pubDate>Sun, 04 Sep 2022 00:00:00 +0000</pubDate><author>rayspock@protonmail.com (rayspock)</author><guid>https://rayspock.com/posts/go-pipeline/</guid><description>Photo by Gioia M. on Unsplash Today&amp;rsquo;s challenge is about working with concurrency in Go - Goroutines, Channels, and Pipelines. The following exercise is from the book, “Mastering Go: Create Golang production applications using network libraries, concurrency, machine learning, and advanced data structures” by Mihalis Tsoukalos. The book not only contains a lot of useful examples and best practices but also helps you understand the capability of Go in depth via well-written descriptions.</description></item><item><title>Let’s Talk About Smart Contracts</title><link>https://rayspock.com/posts/smart-contract/</link><pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate><author>rayspock@protonmail.com (rayspock)</author><guid>https://rayspock.com/posts/smart-contract/</guid><description>Photo by Rock'n Roll Monkey on Unsplash Recently, I finally finished a lecture about developing smart contracts on Blockchain which I bought from Udemy 5 months ago. To be honest, it’s been busy for me to complete a 12 hour long course over the past few months. Nevertheless, it was really great to take a deep dive into learning how to implement some famous use cases like tokenising assets or order tracking with Solidity.</description></item><item><title>What Happens if You Overflow or Underflow Integer in Solidity?</title><link>https://rayspock.com/posts/solidity-integer/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><author>rayspock@protonmail.com (rayspock)</author><guid>https://rayspock.com/posts/solidity-integer/</guid><description>Photo by Elevate on Unsplash Solidity is a programming language used to write smart contracts that are run on Ethereum Blockchain Node. To be precise, it runs on Ethereum Virtual Machine(EVM). Today, I’m about to share one of the more interesting behaviours I found in Solidity.
Unsigned Integers
Signed integral types (int) can represent both positive numbers and negative numbers, whereas Unsigned ones (uint) can only represent positive integers</description></item></channel></rss>