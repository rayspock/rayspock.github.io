<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Ray Yang</title><link>https://rayspock.com/posts/</link><description>Recent content in Posts on Ray Yang</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sun, 04 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://rayspock.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Things You Need to Know Before Working With Go Pipelines</title><link>https://rayspock.com/posts/go-pipeline/</link><pubDate>Sun, 04 Sep 2022 00:00:00 +0000</pubDate><guid>https://rayspock.com/posts/go-pipeline/</guid><description>Today&amp;rsquo;s challenge is about working with concurrency in Go - Goroutines, Channels, and Pipelines&amp;hellip;</description><content type="html"><![CDATA[<p><img src="gioia-m-pipeline-unsplash.jpg" alt="image"></p>
<div class="cn"><sub>
Photo by <a class="au lc" target="_blank" href="https://unsplash.com/@cosmorider?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Gioia M.</a> on <a class="au lc" target="_blank" href="https://unsplash.com/s/photos/pipeline?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
</sub></div>
<br/>
<p>Today&rsquo;s challenge is about working with concurrency in Go - Goroutines, Channels, and Pipelines. The following exercise is from the book, “Mastering Go: Create Golang production applications using network libraries, concurrency, machine learning, and advanced data structures” by Mihalis Tsoukalos. The book not only contains a lot of useful examples and best practices but also helps you understand the capability of Go in depth via well-written descriptions. I highly recommend reading through this book to keep your Go journey going smoothly and advance your programming skill with Go.</p>
<p>Here is the task we would like our program to achieve</p>
<blockquote>
<p>Create a pipeline that reads text files, finds the number of occurrences of a given phrase in each text file, and calculate the total number of occurrences of the phrase in all files.</p>
</blockquote>
<p>The first part of the code is the most straightforward one where we pass file paths and a phrase to the program as the command-line argument, so the program knows which files to look for for the given phrase. A <code>for</code> loop is used to iterate each file, and we are going to create goroutines to read and count the number of occurrences in each one. Finally, we will gather results from all goroutines and sum up the total.</p>
<p>For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;bufio&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;sync&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;sync/atomic&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">wg</span> <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">WaitGroup</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">ops</span> <span style="color:#66d9ef">int32</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>) &lt; <span style="color:#ae81ff">2</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Need at least one phrase and file parameters!&#34;</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">phrase</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">2</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fn</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>[<span style="color:#a6e22e">i</span>]
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// TO-DO: Reads the file and finds the number of occurrences of a given phrase
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// TO-DO: Calculate total numbers of occurrences
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;total occurrences:&#34;</span>, <span style="color:#a6e22e">total</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Before we go to the next stage, we need to figure out how goroutines communicate with each other.
Golang provides a communication mechanism called “Channel” where goroutines can exchange data with others. Therefore, we can leverage Channel to collect outcomes from other goroutines like the code segment below. It takes whatever inputs from the channel(chan keyword) <code>in</code>  and sums them up.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sum</span>(<span style="color:#a6e22e">in</span> <span style="color:#f92672">&lt;-</span><span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">int</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">total</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">in</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">total</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">x</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">total</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The last thing is to read files and count the total occurrences of the given phrase. In the third part of the code, you can find a function <code>scanFile</code> that takes three arguments to specify file path(fn), given phrase(phrase) and channel(out). So far, you probably have an idea what Channel here is used for?  In order to communicate to other entities or goroutines, we need to send out messages to the channel. There is one tiny but very important thing to mention here which is the &lt;- symbol found on the right of the <code>chan</code> keyword. It indicates a write-only channel where you can only send messages to it. On the contrary, if the &lt;- symbol is found on the left side of the <code>chan</code> keyword, then it denotes that the channel can only be used for reading only like we did with the function <code>sum</code>. In the following code segment, we read all the words from the given file and count the numbers of occurrences of the given phrase. The total occurrences <code>count</code> will be sent to the <code>out</code> channel which indicates the <code>in</code> channel in function <code>sum</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">scanFile</span>(<span style="color:#a6e22e">fn</span>, <span style="color:#a6e22e">phrase</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">out</span> <span style="color:#66d9ef">chan</span><span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">fn</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">scanner</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bufio</span>.<span style="color:#a6e22e">NewScanner</span>(<span style="color:#a6e22e">f</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">bufio</span>.<span style="color:#a6e22e">ScanWords</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">count</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Scan</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">phrase</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Text</span>() {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">count</span><span style="color:#f92672">++</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;file:&#34;</span>, <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Name</span>(), <span style="color:#e6db74">&#34;, occurrences:&#34;</span>, <span style="color:#a6e22e">count</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// send to the channel
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">out</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">count</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Err</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now, we can connect all the dots and finish our main function like the code snippet below.
Basically, we finish most of the logic and it should work as expected. However, if we attempt to execute this program, we will get an error message like: <code>fatal error: all goroutines are asleep - deadlock!</code>. This is because we forgot to close the channel where the function sum was reading messages from and because of that, the program doesn&rsquo;t know when to stop reading messages from the channel and then causes a deadlock.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>) &lt; <span style="color:#ae81ff">2</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Need at least one phrase and file parameters!&#34;</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">phrase</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">A</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">int</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">jobNumbers</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">2</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fn</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>[<span style="color:#a6e22e">i</span>]
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Reads the file and finds the number of occurrences of a given phrase
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">go</span> <span style="color:#a6e22e">scanFile</span>(<span style="color:#a6e22e">fn</span>, <span style="color:#a6e22e">phrase</span>, <span style="color:#a6e22e">A</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Calculate total numbers of occurrences
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">total</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sum</span>(<span style="color:#a6e22e">A</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;total occurrences:&#34;</span>, <span style="color:#a6e22e">total</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>How do we resolve it and make sure that we close the channel properly when every goroutine finishes their jobs? It is worthwhile to mention that we cannot close a closed channel in golang, therefore, only the last goroutine which finishes its jobs can close the channel.
Let’s imagine that channels are serving stations where we hold food and goroutines are the staff who serve the food. Let&rsquo;s say we would like to close the cafeteria, those serving stations need to be properly closed. Therefore, we have to assure that only the last person who finishes the serving can close the serving station, otherwise - hypothetically - others might not be able to serve food in the future.</p>
<p>Let&rsquo;s get back to the <code>main</code> function here below to see how we can refine it. We would need a counter which can be accessed by multiple goroutines, so that we could keep track of how many goroutines are still working and will need to use the channel. However, how do we manage states between goroutines without causing race conditions? Well, this is where <code>sync/atomic</code> comes in handy. We can setup a new variable <code>ops</code> and leverage the package <code>atomic</code> to control our state across goroutines and prevent race conditions.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">ops</span> <span style="color:#66d9ef">int32</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>) &lt; <span style="color:#ae81ff">2</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Need at least one phrase and file parameters!&#34;</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">phrase</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">A</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">int</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">jobNumbers</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>) <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">atomic</span>.<span style="color:#a6e22e">AddInt32</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">ops</span>, int32(<span style="color:#a6e22e">jobNumbers</span>)) <span style="color:#75715e">// to keep track of total numbers of goroutines
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">2</span>; <span style="color:#a6e22e">i</span> &lt; len(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fn</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>[<span style="color:#a6e22e">i</span>]
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// Reads the file and finds the number of occurrences of a given phrase
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">go</span> <span style="color:#a6e22e">scanFile</span>(<span style="color:#a6e22e">fn</span>, <span style="color:#a6e22e">phrase</span>, <span style="color:#a6e22e">A</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// Calculate total numbers of occurrences
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">total</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sum</span>(<span style="color:#a6e22e">A</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;total occurrences:&#34;</span>, <span style="color:#a6e22e">total</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The last part of the <code>scanFile</code> function is as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">scanFile</span>(<span style="color:#a6e22e">fn</span>, <span style="color:#a6e22e">phrase</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">out</span> <span style="color:#66d9ef">chan</span><span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#66d9ef">func</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">atomic</span>.<span style="color:#a6e22e">AddInt32</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">ops</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">atomic</span>.<span style="color:#a6e22e">LoadInt32</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">ops</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>			close(<span style="color:#a6e22e">out</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">fn</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Close</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">scanner</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bufio</span>.<span style="color:#a6e22e">NewScanner</span>(<span style="color:#a6e22e">f</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Split</span>(<span style="color:#a6e22e">bufio</span>.<span style="color:#a6e22e">ScanWords</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">count</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Scan</span>() {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">phrase</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Text</span>() {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">count</span><span style="color:#f92672">++</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;file:&#34;</span>, <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Name</span>(), <span style="color:#e6db74">&#34;, occurrences:&#34;</span>, <span style="color:#a6e22e">count</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// send to the channel
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">out</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">count</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Err</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here we add an anonymous function to manage the counter <code>ops</code> we mentioned previously. Basically, what it does is to check whether it can close the channel or not after decreasing <code>ops</code> by 1. Furthermore, use the <code>defer</code> keyword to make sure that each goroutine will remember to manage the counter when it finishes its jobs, so we can keep <code>ops</code> in-sync across goroutines. As a result, only the last goroutine to finish can scan the document and close the channel.</p>
<p>The source code for this tutorial is available <a href="https://github.com/rayspock/mastering-go-examples/blob/main/pipeline.go">here</a></p>
<p>Thank you for reading this article.</p>
]]></content></item><item><title>Let’s Talk About Smart Contracts</title><link>https://rayspock.com/posts/smart-contract/</link><pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate><guid>https://rayspock.com/posts/smart-contract/</guid><description>Recently, I finally finished a lecture about developing smart contracts on Blockchain which I bought&amp;hellip;</description><content type="html"><![CDATA[<p><img src="rock-n-roll-monkey-smart-contract-unsplash.jpg" alt="image"></p>
<div class="cn"><sub>
Photo by <a class="au lc" target="_blank" href="https://unsplash.com/@rocknrollmonkey?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Rock'n Roll Monkey</a> on <a class="au lc" target="_blank" href="https://unsplash.com/s/photos/robot?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
</sub></div>
<br/>
<p>Recently, I finally finished a lecture about developing smart contracts on Blockchain which I bought from Udemy 5 months ago. To be honest, it’s been busy for me to complete a 12 hour long course over the past few months. Nevertheless, it was really great to take a deep dive into learning how to implement some famous use cases like tokenising assets or order tracking with Solidity. It was worth the effort to do it because I now feel more confident than before when I was developing smart contract projects during hackathon events.</p>
<p>According to Wikipedia:</p>
<blockquote>
<p>“Solidity is an object-oriented programming language for implementing smart contracts on various blockchain platforms, most notably, Ethereum. It was developed by Christian Reitwiessner, Alex Beregszaszi, and several former Ethereum core contributors. Programs in Solidity run on Ethereum Virtual Machine.”</p>
</blockquote>
<p>I was drawn to this technology where we can write a piece of immutable code that can be executed automatically without any middleman involved. To put it simply, we don’t have to worry about whether we can trust a centralised authority to claim that the services or software they provide are legit or verified. This kind of trustless characteristic is the core notion of blockchain where smart contracts are stored and run.</p>
<p>Now, we know smart contracts are programs where you can automate them to execute agreements when predefined criteria are met, therefore, we can get one step further to automate workflows that need to be done in our daily life. These could be things such as retrieving stock market reports when there are huge fluctuations in the market or tracking shipping when there are orders made. Essentially, almost everything that happens in the real world can be seen as contracts or agreements to achieve a certain goal under certain conditions like turning on lights when the sky gets dark. The only missing puzzle is how we convert these contracts to smart contracts in practical manners.</p>
]]></content></item><item><title>What Happens if You Overflow or Underflow Integer in Solidity?</title><link>https://rayspock.com/posts/solidity-integer/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://rayspock.com/posts/solidity-integer/</guid><description>What if we try to store the result of some arithmetic that falls outside of the declared range&amp;hellip;</description><content type="html"><![CDATA[<p><img src="elevate-overflow-unsplash.jpg" alt="image"></p>
<div class="cn"><sub>
Photo by <a class="au lc" target="_blank" href="https://unsplash.com/@elevatebeer?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Elevate</a> on <a class="au lc" target="_blank" href="https://unsplash.com/s/photos/overflow?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
</sub></div>
<br/>
<p>Solidity is a programming language used to write smart contracts that are run on Ethereum Blockchain Node. To be precise, it runs on Ethereum Virtual Machine(EVM). Today, I’m about to share one of the more interesting behaviours I found in Solidity.</p>
<p><em><strong>Unsigned Integers</strong></em></p>
<p>Signed integral types (int) can represent both positive numbers and negative numbers, whereas Unsigned ones (uint) can only represent positive integers</p>
<p><em><strong>Size of Integers</strong></em></p>
<p>The default size of integers is 32 bytes, which can be declared as <code>uint</code>. Also, we can explicitly specify the size of integers by adding the trailing number of bits such as <code>uint8</code> which can store in 8 bits allowing 256 combinations (0 through 255).</p>
<p>What if we try to store the result of some arithmetic that falls outside of the declared range? In other programming languages, like Golang, the software may panic and disable the action ( causing an exception in the program), but it&rsquo;s not the case in Solidity(before version 0.8). It will still be runnable without failing the action, but the result won’t be what we expected, it will roll over to the next digit it can represent or store.</p>
<p>Feel free to try the code snippet below and see if you can overflow or underflow integers.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-solidity" data-lang="solidity"><span style="display:flex;"><span><span style="color:#66d9ef">pragma solidity</span> <span style="color:#f92672">&gt;=</span><span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">6</span>.<span style="color:#ae81ff">0</span> <span style="color:#f92672">&lt;</span><span style="color:#ae81ff">0</span>.<span style="color:#ae81ff">7</span>.<span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">contract</span> <span style="color:#a6e22e">Overflow</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// value range : 0 ~ 255
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">uint8</span> <span style="color:#66d9ef">public</span> balance;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">maxTheBalance</span>() <span style="color:#66d9ef">public</span> {
</span></span><span style="display:flex;"><span>        balance <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">**</span> <span style="color:#ae81ff">8</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// if the balance was 0, after decreasing it by 1, the balance will become 255
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">decrease</span>() <span style="color:#66d9ef">public</span> {
</span></span><span style="display:flex;"><span>        balance <span style="color:#f92672">=</span> balance <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// if the balance was 255, after increasing it by 1, the balance will become 0
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">increase</span>() <span style="color:#66d9ef">public</span> {
</span></span><span style="display:flex;"><span>        balance <span style="color:#f92672">=</span> balance <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>; 
</span></span><span style="display:flex;"><span>    } 
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content></item><item><title>Some Thoughts on Using Event Sourcing</title><link>https://rayspock.com/posts/event-sourcing/</link><pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate><guid>https://rayspock.com/posts/event-sourcing/</guid><description>About a year ago, I started to work with event sourcing and built a system around it. It seemed quite&amp;hellip;</description><content type="html"><![CDATA[<p><img src="hasnain-sikora-time-machine-unsplash.jpg" alt="image"></p>
<div class="cn"><sub>
Photo by <a class="au lc" target="_blank" href="https://unsplash.com/@hasnainsikora?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Hasnain Sikora</a> on <a class="au lc" target="_blank" href="https://unsplash.com/s/photos/delorean?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
</sub></div>
<br/>
<p>About a year ago, I started to work with event sourcing and built a system around it. It seemed quite new to me, but the more I learned, the easier it became. Basically, I&rsquo;ve already worked with event sourcing for my entire career as a software engineer even starting at school, however, I didn&rsquo;t realise it at that time.</p>
<p>As long as you have coding experience you should be able to work with version control systems such as Git, which enables event sourcing. Every commit you push to Git is stored as an event representing a change that can be added, edited or removed from files or code. This is the core concept of event sourcing where you can source back all the events that have happened in the past. As a result of this, we can revert the changes that have been made in the code from git whenever needed - Just like a time machine isn’t it ;)</p>
<p>The sooner you master Git the quicker it makes your life easier. It had my back a few times in my career and saved a lot of time :) I highly recommend this to those who want to work as a developer and spend some time cultivating it. I digress a little bit here. Let&rsquo;s talk about when to use event sourcing. It’s not a silver bullet that allows you to solve any problem, it really does add complexity to your system, so make sure you think through the goal you want to achieve that can be solved by it before adopting it.</p>
<p>The first scenario where you might use event sourcing is when you want full audit trails in your system like with payment or banking. This is also the core reason why I adopt it in my work. We have different records and transactions, including finance, accounting and medical, that must be tracked and verified.</p>
<p>The second one is reporting. With event sourcing, you have way more insights into your data, and you can generate reports retroactively. Just like data mining where you extract significant information from a collection of data.</p>
<p>The third scenario is parallel processing. Every microservice communicates through event messages, so they are in a loose couple style without depending on each other. Suppose you are looking for a highly scalable solution, this could potentially satisfy horizontal scalability and resilience to system failure.</p>
<p>Are there other problems that can be solved by event sourcing? Tell me what you think and I hope this blog will inspire you to explore solutions for your use cases.</p>
]]></content></item><item><title>How I Became a Developer? (PART2)</title><link>https://rayspock.com/posts/how-i-became-a-developer-2/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://rayspock.com/posts/how-i-became-a-developer-2/</guid><description>In order to explore the digital world and know how the computer works, I started my undergraduate education in medical&amp;hellip;</description><content type="html"><![CDATA[<p><img src="rayspock-developer-journey-2.jpg" alt="image"></p>
<p>In order to explore the digital world and know how the computer works, I started my undergraduate education in medical informatics. According to <a href="https://psychology.wikia.org/wiki/Psychology_Wiki">psychology wiki</a>:</p>
<blockquote>
<p>Health informatics or medical informatics is the intersection of information science, computer science and health care. It deals with the resources, devices and methods required to optimize the acquisition, storage, retrieval and use of information in health and biomedicine.</p>
</blockquote>
<p>You might be wondering why I didn’t choose computer science? Well…the truth was computer science was not the only thing that I was really into but also health care. I remember I asked my sister about what the tech guys did in the hospital because she worked there after graduating. I kept asking questions which were quite hard to answer, such as “how do the programs work to store the data in the database?” and “how do people upload their medical records to the system?”. What piqued my curiosity was how the doctors used information technology to examine the patients. Apparently, I didn’t get the answer from her in the end, because this wasn’t my sisters’ speciality, therefore I ended up finding the answer by myself.</p>
<p>To be honest, it wasn&rsquo;t an easy route to master both computer science and health care. Even though I had to pull many all-nighters or go through a lot of tough times, I still did it eventually and felt fulfilled and fruitful in the end.</p>
<p>At a later time, I didn&rsquo;t start my career in the hospital or healthcare industry, even though my expertise was in the health informatics area. The reason was that the technology in medical care was lagging behind. It was hard to grow quickly and to be able to learn a lot of sophisticated technology. It turns out the time I spent outside of the healthcare industry was worth it, I learned a lot about the full lifecycle of the software design process, including requirements definition, prototyping, proof of concept and object-oriented programming etc.</p>
<p>I feel like the knowledge I studied at school, more specifically an educational institution, was very different from the knowledge I learned in the corporation or open-source community. Institutionalized education normally provides a well-structured learning experience, so you do not only need to learn the courses you like but the courses you are not very into, not to mention the majority of the courses are about theory. However, the training you gain in the enterprise is mainly practical and work-related which I enjoyed most. I quite applaud the saying that, “the secret of learning is the desire to learn” - this is how you cultivate the skill, gain the ability and increase your knowledge. This was my journey towards becoming an excellent developer.</p>
<p>I hope you will find something useful through my journey and if you have any questions or feel that I kept something up my sleeve😉, feel free to email me or create issues <a href="https://github.com/rayspock/rayspock/issues">here</a>. I would love to share😄.</p>
<p>Cheers!</p>
]]></content></item><item><title>How I Became a Developer? (PART1)</title><link>https://rayspock.com/posts/how-i-became-a-developer-1/</link><pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate><guid>https://rayspock.com/posts/how-i-became-a-developer-1/</guid><description>Technology is one of the most popular aspects in almost every industry. As for software technology, they have been widely used for decades. I still remember&amp;hellip;</description><content type="html"><![CDATA[<p><img src="rayspock-developer-journey-1.jpg" alt="image"></p>
<p>Technology is one of the most popular aspects in almost every industry. As for software technology, they have been widely used for decades. I still remember the first computer that my dad bought me which requires you to install a bunch of different software and specifically only use the operating system ‘windows 95’ in order to function properly. Yeah, it was very old so you might not have heard of it and the performance is much slower than the smartphone people have nowadays, but it was pretty awesome back then.</p>
<p>For most children, including me, the most exciting part of computers is using them to play video games. We did have some programming classes in school, besides, who cannot be attracted by those fancy and interesting gaming experiences? Those games transport us to new realities and satisfy our needs for achievement and recognition. These are how I started to immerse myself in the digital world.</p>
<p>After I built my own PC (well&hellip; technically I assembled it), I discovered that building computers was way more fun than the games I was playing on them. There is always an end to the game, but this is not the case when building your PC, which has nearly endless outcomes. By the way, I was not talking about the open-world games like Minecraft, which had not come out yet back then or at least very few of them.</p>
<p>I started to do all kinds of research about computers and the principles behind them. So I assisted people in building their PC and even became their consultant to practice what I have learned. This process made me realise that I am very into tech and want to become tech-savvy.</p>
<p>Next part would be to tell you about the rest of the journey🚀.</p>
<p>Cheers!</p>
]]></content></item><item><title>How Do I Clear Cookies for a Specific Site With One Click?</title><link>https://rayspock.com/posts/clean-captain/</link><pubDate>Sun, 13 Jun 2021 00:00:00 +0000</pubDate><guid>https://rayspock.com/posts/clean-captain/</guid><description>Clear your cache and cookies from the website you are visiting in just one click&amp;hellip;</description><content type="html"><![CDATA[<p>I often find that clearing cookies for the website that I’m visiting is a real annoyance because it comes with several steps to use the built-in feature that chrome provides to clear them. Besides, most of the <strong>Chrome Extensions</strong> will clear all the website data and you will lose all your login details for some websites. If you’re lucky you might be fine with signing in.</p>
<p>But the truth is people (at least in my experience) won’t always remember the username/password when needed. This can become a huge disaster.</p>
<p>Well, it’s time to build my🚀 chrome extension called <strong>Clean Captain</strong>.</p>
<p>Before we jump in and get our hands dirty, we have to understand the pain point.</p>
<hr>
<h2 id="how-to-clear-cookies-without-extension">How to clear cookies without extension</h2>
<p>I used to practice the following steps to clear cookies before I rolled out this extension, which turned out to be not so user-friendly.</p>
<ol>
<li>
<p>Select the <strong>lock icon</strong> next to website URL in the Address bar.</p>
</li>
<li>
<p>Click <strong>Cookies</strong> with numbers identified how many cookies in use.</p>
</li>
<li>
<p>Scroll down and <strong>locate the site</strong> that you&rsquo;d like to clear the cookies.</p>
</li>
<li>
<p>Click <strong>Remove</strong> will only delete the cookies from the site you selected in the previous step.</p>
</li>
</ol>
<hr>
<h2 id="clean-captain">Clean Captain</h2>
<p>Clean Captain is a lightweight extension that enables you to remove the cookies from most websites that need cookies enabled to work properly. Protect your privacy and delete all activity from specifying websites. You can keep sessions or cookies from those websites you trust.</p>
<figure><img src="clean-captain-screenshot.png"
         alt="clean captain"/>
</figure>

<hr>
<h2 id="where-to-get-it">Where to get it</h2>
<ul>
<li><strong>Clean Captain</strong> from <a href="https://chrome.google.com/webstore/detail/clean-captain/finpbdieoeedpjhaimgobfodhhdnoljb">Chrome Web Store</a></li>
<li>Loves to get your hands dirty, check out the <a href="https://github.com/rayspock/clean-captain">Source Code</a></li>
</ul>
<hr>
<p>I hope you will find this guide useful and if you have any questions about how to create your chrome extensions, I&rsquo;d be glad to answer them.</p>
<p>Cheers!</p>
]]></content></item></channel></rss>